/*
    This is the config generated specifically for Failstream to use during his SoulLink run.  It may be a useful 
    example.
*/
{
    /*
    Pokemon Generation
    
    Valid values: 3 through 5.  (Values 4 and 5 do the same thing).
    */
    "generation": 5,
    
    "server": {
        // The port to use when accessing the page that you insert into your stream scene.
        // 
        // The url to that page will be http://localhost:<port>/.  Using the default 8081 means that url will be
        // http://localhost:8081/.  
        //
        // IMPORTANT: if you modify this value, you must also modify it in the Lau script at 
        //            /lua/send_data_to_server.lua.
        //
        // If you aren't running your own webserver, using port 80 means you don't need to include the :<port> part of 
        // the url.  DON'T use port 443, as the browser will expect https rather than http, and this server doesn't 
        // support SSL.
        //
        // NOTE: StreamLabs uses port 8080, so if you use StreamLabs or another app that listens to 8080, and set this 
        //       value to 8080, you're gonna have a bad time.  (Port 8080 is pretty commonly used in local webserver
        //       apps, and the value I initially used until I found out about StreamLabs.)
        "port": "8081"
    },
    
    /*
    Path to images folder relative to the /node/server directory.
    I suggest using the zip found at http://pkmn.net/?action=content&page=viewpage&id=8644, extracting the
    Pokémon folder, and then choosing BW since the directory structure is what the script expects it to be.

    The server will search the following paths for images:
        pokemonImagesPath/
        pokemonImagesPath/female
        pokemonImagesPath/shiny
        pokemonImagesPath/shiny/female
        pokemonImagesPath/forms/...
    
    NOTE: Giratina's and Arceus' alternate forms aren't available by default.  If you want to use them:
        Run setupPokemonImages.cmd 
        
        OR:
        For Giratina, open /BW/forms/giratina directory, and rename the two "another" files (the one in the root and the
            one in Shiny) to "altered".
        For Arceus, find the various images you want to use (/DPPt/Arceus has them, and if you use them, you should use 
            the <type>2.pngs as they have transparent backgrounds), copy them into /BW/forms/arceus, and rename them all
            to be of the form "493<type>.png" for non-shiny and "493s<type>.png" for shiny.  *IMPORTANT*: <type> is 
            from the list at https://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_data_structure_in_Generation_IV#Alternate_forms,
            not the type already in the filename.  (Leave "mystery" as-is, since Windows doesn't support filenames with 
            question marks in them.)
    */
    "pokemonImagesPath": "../../pokemon-images/BW",

    // Path to the image used when a slot is empty relative to /node/ directory.
    // "emptySlotImagePath": "../../pokemon-images/pokeball.png",

    "layout": { 
        // Whether you want the page to display all slots on one page, or have one slot per page so you can place them
        // in your scene however you like.
        "allInOne": true,
        
        /*  
        Where to place the various elements relative to the pokemon image.
        All elements are optional.  The order in which they appear in the array are the order they are stacked in the
        page element.  For example, if you have "nickname" and "species" in the "bottomElements" list, the bottom 
        element will have a line for the nickname followed by a line for the species.
        
        NOTE: The death messages *replace* the other elements listed (aside from other death messages).
        
        Available elements are:
        • nickname
        • species
        • level
        • deathMessage1 (see nuzlocke options below)
        • deathMessage2
        • deathMessage3
        
        Available SoulLink elements are:
        • sl-nickname
        • sl-species
        • sl-level
        */
        "topElements": [],
        "bottomElements": [ "species" ],
        "leftElements": [],
        "rightElements": [],
        "imageOverlayElements": ["level"],
        "soulLinkOverlayElements": [
            "sl-level"
        ],
    },
    
    /*
    If you are doing a Nuzlocke challenge, these options add some silly effects when one of your Pokemon dies.
    */
    "nuzlocke": {
        "enabled": true,
        
        // Make the pokemon spin slowly.
        "applyDeathSpin": true,
        
        // **EXPERIMENTAL**
        // Play a depressing sound when a Pokemon dies.  This path is absolute or relative to the /node/public/ 
        // directory.
        "deathSound": {
            "enabled": true,
            "filePath": "the-price-is-right-losing-horn.mp3"
        },
        
        // Places some content before the nickname element.  This should include a space after it and needs to be 
        // wrapped in single-quotes (as the value is being placed in a CSS file).
        "ripPrefix": "'RIP '",
        
        // These messages are displayed, replacing the text in whichever element they appear, when a Pokemon dies.
        // NOTE: currently these are not supported in Soul Link mode
        "deathMessage1": "You died too young",
        "deathMessage2": "We hardly knew you",
        "deathMessage3": null,
        
        "soulLink": {
            "enabled": true,
            
            "guild": "dxdt", // Discord server (they're called Guilds in the Discord API)
            "channelName": "private-test",
            "userToken": "NDIyMjg4OTU4OTcwNTI3NzQ0.DYaHyw.PLI1tXxO1UvgoroXynwz73HwQbI",
            
            "deathSound": {
                "enabled": true,
                
                // if enabled but not specified, defaults to nuzlocke.deathSound.filePath
                "filePath": "you-lose-good-day-sir.mp3"
            }
        },
    },
    
    /*
    These are the CSS styles applied to the various elements of the page.  They are imported into /node/client/sass/,
    so if you want more granular control, edit the values there.
    
    NOTE: If you want to use reference a value defined in the style section in another value, add a $ in front of it.
    Any values not prefixed with a $, %, @, or . are added as SASS variables and may be used in any later-defined
    values.  That is, you can define whatever new variables you'd like, though the ones already listed are required.
    See https://sass-lang.com/ for more information on SASS variables and what you can do with them.
    */
    "style": {
        // The square side-length of the image.  The image will be scaled to this size regardless of the size of the 
        // image source.
        // "imageSideLength": "128px",
        "imageSideLength": "220px",

        // Optional sizes if you want the image wrapper to be a different size than the image
        //
        // Note to Failstream: these values are required to be set the way they are to make the divide be at the correct
        //                     angle.
        "imageWrapperWidth": "220px",
        "imageWrapperHeight": "204px",

        // if you want to override the size of a slot, you can here... your milage may vary
        // "totalSlotHeight": undefined,
        "totalSlotWidth": "230px",
        
        // Text will be centered both horizontally and vertically (by default) within each element.
        // "leftElementWidth": "50px",
        // "rightElementWidth": "50px",
        // "topElementHeight": "0",
        // "bottomElementHeight": "30px",
        "leftElementWidth": "0",
        "rightElementWidth": "0",
        "topElementHeight": "0",
        "bottomElementHeight": "20px",
        
        "%body": {
            // You almost certainly want this to be "transparent" so that it is rendered cleanly in your scene, but it 
            // may be useful to change it when setting things up so that you can more easily see text if your text hard 
            // to see against the browser's default white background.
            "background": "transparent",
            
            "margin-top": "8px !important"
        },
        
        // Default text styles.  These can be overridden below.
        // The default settings are what failstream (twitch.tv/failstream) uses, as I'm writing this tool for him.
        // They produce yellow-orange text outlined in fading-transparent white.  When placed on top of a blue 
        // background it is reminiscient of the official Pokemon logo.
        "%baseText": {
            "font-size": "30px",
            "font-family": "Arial, sans-serif",
            "background": "-webkit-linear-gradient(#ff8c00, #ffd700)",
            "background-clip": "text",
            "-webkit-background-clip": "text",
            "-webkit-text-fill-color": "transparent",
            "text-shadow": "0 0 8px white",
            "text-align": "center"
        },
        
        "%levelText": {
            // "width": "$rightElementWidth !important",
            "font-size": "36px",
            
            // By default, texts on the left and right of the image are rotated.  Setting transform to "unset" prevents
            // this.
            // "transform": "unset !important"

            "margin": "8px",
        },
        
        // This should include a space after it and needs to be wrapped in single-quotes (as the value is being placed 
        // in a CSS file).
        // "levelPrefix": "'Lvl '",

        "speciesBg": "silver",
        
        "%speciesText": {
            "background": "$speciesBg",
            "padding": "0 16px",
            "margin-top": "4px",
            "font-weight": "bold",
            "font-variant": "small-caps",
            "color": "black",
            "border": "2px solid darken($speciesBg, 20%)",
            "border-radius": "16px",
            "-webkit-background-clip": "unset",
            "background-clip": "unset",
            "-webkit-text-fill-color": "unset",
            "text-shadow": "unset",
        },
        // "%nicknameText": {},
        
        // these styles are applied to both death messages, and can be overridden below
        "%deathMessageText": {
            "font-size": "20px",
        },
        
        "%deathMessage1Text": {},
        "%deathMessage2Text": {},
        "%deathMessage3Text": {},
        
        // styles to apply to the div that contains the pokemon image
        "%imageWrapperStyle": {},
        
        // Soul Link styles
        
        // How to display soul-linked slots on the webpage
        // Options are:
        // • diagonal-foward: a division from bottom-left to top-right
        // • diagonal-backward: a division from top-left to bottom-right
        // • horizontal: a horizontal division with pokemon above and below
        // • veritical: a vertical division with pokemon to the left and right
        // • thumbnail: your pokemon is displayed normally, and its soul-linked pokemon is overlayed in the bottom right
        //              corner
        // • custom: (TODO) no style is applied except for the clipping SVGs you specify below; you must provide your 
        //           own styles by editing /node/client/sass/* files
        //
        // NOTE: your pokemon will always be on the top (or the left in the vertical case unless you set 
        //       soulLinkSwap below)
        "soulLinkOrientation": "diagonal-backward",
        
        // TODO!
        // if you want to use an SVG file to determine the clipping, specify the paths relative to /node/public
        // "customClipSvgTop": "path/to/svg",
        // "customClipSvgBottom": "path/to/svg",
        
        // set this to true if you want your pokemon to be on bottom (or on the right side in the vertical case)
        "soulLinkSwap": false,
        
        // the space between the two images
        "soulLinkGap": "12px",
        
        // styles for the soulLinked image wrapper
        "%soulLinkedStyle": {
            "padding-top": "30px",
        },

        // how far to shift the image away from the divide so that you can see more of the pokemon
        "imageShift": "5%",

        // the style to give your pokemon when a suitable counterpart has not been found
        "%invalidPokemonStyle": {
            "filter": "brightness(70%)",
        },

        // the style to give your partner's pokemon when that pokemon is boxed
        "%boxedStyle": {
            "filter": "sepia(100%)",
        }
    }
}